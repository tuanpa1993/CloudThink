using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using WebApplication1.Models;
using Microsoft.WindowsAzure.Storage;
using Microsoft.WindowsAzure.Storage.Auth;
using Microsoft.WindowsAzure.Storage.Table;
using StatDescriptive;
using NUnit.Framework;
using Accord.Statistics;
using CenterSpace.NMath.Core;
using WebApplication1.Fus;
using vget_dataprocess;
using MathWorks.MATLAB.NET.Arrays;
using MathWorks.MATLAB.NET.Utility;
using MathWorks.MATLAB.NET.ComponentData;
using System.Net.Http.Formatting;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace WebApplication1.Controllers
{ 
    
    public class CloudDataController : ApiController
    {
        

        [HttpGet]
        public IHttpActionResult Get([FromUri]CloudData cloud) 
        {
            string accountName = "cloudthinkstorage";
            string accountKey = "u0gOpUjoxc9OWpjSBTSvm7tFHZPz8r8iFKK4uWxjtnC3Sh17oKytYMxR69lsfmGfkcmoQNmPPRWbD12l8QyNbg==";
            try
            {
                StorageCredentials creds = new StorageCredentials(accountName, accountKey);
                CloudStorageAccount account = new CloudStorageAccount(creds, useHttps: true);
                CloudTableClient client = account.CreateCloudTableClient();
                CloudTable table = client.GetTableReference("cloudthinktest");
                TableBatchOperation batchOperation = new TableBatchOperation();
                table.CreateIfNotExists();
                List<Double> listData = new List<double>();
                string data = "[74.0, 7.0, 5.0, 732.0, 1007.0, 1019.0, 595.0, 54.0, 5.0, 4.0, 807.0, 1015.0, 1023.0, 437.0, 73.0, 7.0, 4.0, 733.0, 1009.0, 589.0, 54.0, 5.0, 3.0, 809.0, 1014.0, 428.0, 345.0, 39.0, 6.0, 736.0, 792.0, 1007.0, 573.0, 394.0, 52.0, 5.0, 813.0, 855.0, 1018.0, 437.0, 349.0, 40.0, 3.0, 22.0, 832.0, 1009.0, 579.0, 53.0, 42.0, 5.0, 812.0, 860.0, 1017.0, 425.0, 249.0, 39.0, 3.0, 740.0, 1006.0, 1012.0, 577.0, 53.0, 40.0, 5.0, 817.0, 908.0, 1014.0, 425.0, 39.0, 31.0, 3.0, 873.0, 928.0, 1019.0, 579.0, 53.0, 29.0, 5.0, 817.0, 1018.0, 1023.0, 425.0, 39.0, 3.0, 872.0, 1023.0, 1023.0, 570.0, 52.0, 5.0, 4.0, 819.0, 1015.0, 1023.0, 419.0, 38.0, 3.0, 2.0, 875.0, 1023.0, 1023.0, 454.0, 51.0, 4.0, 2.0, 823.0, 1019.0, 417.0, 336.0, 38.0, 3.0, 2.0, 874.0, 1023.0, 308.0, 250.0, 51.0, 4.0, 819.0, 860.0, 1018.0, 413.0, 284.0, 38.0, 3.0, 873.0, 904.0, 1023.0, 304.0, 242.0, 28.0, 4.0, 819.0, 888.0, 1016.0, 409.0, 37.0, 30.0, 3.0, 874.0, 909.0, 1023.0, 303.0, 28.0, 4.0, 820.0, 1016.0, 1021.0, 409.0, 37.0, 28.0, 3.0, 878.0, 946.0, 1023.0, 305.0, 28.0, 22.0, 2.0, 821.0, 1016.0, 1023.0, 403.0, 37.0, 20.0, 3.0, 880.0, 1023.0, 1023.0, 303.0, 28.0, 17.0, 2.0, 919.0, 1020.0, 402.0, 324.0, 37.0, 3.0, 2.0, 882.0, 1023.0, 1023.0, 299.0, 27.0, 2.0, 58.0, 916.0, 1017.0, 402.0, 324.0, 37.0, 3.0, 50.0, 875.0, 1023.0, 293.0, 237.0, 27.0, 2.0, 187.0, 920.0, 1023.0, 402.0, 239.0, 37.0, 882.0, 911.0, 1023.0, 297.0, 204.0, 27.0, 2.0, 919.0, 942.0, 1023.0, 220.0, 176.0, 32.0, 3.0, 879.0, 929.0, 1023.0, 293.0, 27.0, 21.0, 2.0, 919.0, 945.0, 1023.0, 216.0, 127.0, 23.0, 3.0, 882.0, 1023.0, 1023.0, 294.0, 27.0, 20.0, 3.0, 924.0, 975.0, 1023.0, 218.0, 20.0, 16.0, 3.0, 881.0, 1023.0, 1023.0, 288.0, 26.0, 14.0, 3.0, 919.0, 1023.0, 1023.0, 213.0, 19.0, 12.0, 163.0, 882.0, 1023.0, 283.0, 229.0, 26.0, 3.0, 92.0, 1023.0, 1023.0, 213.0, 19.0, 175.0, 343.0, 887.0, 1023.0, 288.0, 231.0, 26.0, 5.0, 338.0, 925.0, 1023.0, 212.0, 172.0, 19.0, 182.0, 434.0, 954.0, 1023.0, 285.0, 170.0, 26.0, 5.0, 924.0, 946.0, 1023.0, 210.0, 144.0, 19.0, 187.0, 955.0, 971.0, 1023.0, 283.0, 26.0, 21.0, 6.0, 929.0, 966.0, 1023.0, 211.0, 19.0, 15.0, 192.0, 956.0, 976.0, 1023.0, 283.0, 26.0, 16.0, 6.0, 923.0, 1023.0, 1023.0, 206.0, 18.0, 190.0, 952.0, 992.0, 1023.0, 152.0, 25.0, 8.0, 118.0, 928.0, 1023.0, 1023.0, 206.0, 19.0, 10.0, 211.0, 957.0, 1023.0, 1023.0, 155.0, 14.0, 8.0, 239.0, 925.0, 1023.0, 203.0, 164.0, 18.0, 206.0, 367.0, 955.0, 1023.0, 1002.0, 151.0, 13.0, 9.0, 926.0, 947.0, 1023.0, 204.0, 164.0, 18.0, 220.0, 536.0, 959.0, 1023.0, 151.0, 122.0, 13.0, 431.0, 609.0, 955.0, 1023.0, 204.0, 120.0, 18.0, 219.0, 958.0, 974.0, 1023.0, 151.0, 103.0, 13.0, 428.0, 991.0, 1023.0, 200.0, 18.0, 14.0, 221.0, 958.0, 986.0, 1023.0, 148.0, 13.0, 10.0, 437.0, 981.0, 996.0, 1023.0, 200.0, 18.0, 11.0, 228.0, 958.0, 1023.0, 1023.0, 148.0, 13.0, 9.0, 434.0, 981.0, 1007.0, 1023.0, 198.0, 18.0, 230.0, 383.0, 958.0, 1023.0, 1023.0, 144.0, 13.0, 439.0, 555.0, 980.0, 1023.0, 957.0, 108.0, 17.0, 239.0, 469.0, 962.0, 1023.0, 146.0, 118.0, 13.0, 452.0, 563.0, 983.0, 1023.0, 736.0, 108.0, 17.0, 248.0, 962.0, 978.0, 145.0, 116.0, 13.0, 454.0, 678.0, 981.0, 1023.0, 107.0, 87.0, 9.0, 251.0, 959.0, 978.0, 1023.0, 142.0, 84.0, 12.0, 454.0, 984.0, 995.0, 1023.0, 107.0, 73.0, 9.0, 603.0, 962.0, 997.0, 1023.0, 143.0, 13.0, 10.0, 454.0, 983.0, 1004.0, 1023.0, 106.0, 9.0, 8.0, 600.0, 960.0, 1023.0, 1023.0, 141.0, 12.0, 8.0, 458.0, 982.0, 1023.0, 933.0, 104.0, 9.0, 7.0, 609.0, 1000.0, 1012.0, 973.0, 142.0, 12.0, 466.0, 985.0, 1023.0, 842.0, 105.0, 9.0, 608.0, 688.0, 1000.0, 851.0, 680.0, 131.0, 12.0, 463.0, 627.0, 981.0, 1023.0, 104.0, 84.0, 9.0, 610.0, 690.0, 999.0, 844.0, 516.0, 96.0, 12.0, 470.0, 985.0, 996.0, 1023.0, 104.0, 83.0, 9.0, 617.0, 779.0, 1000.0, 850.0, 77.0, 62.0, 12.0, 473.0, 985.0, 998.0, 1023.0, 102.0, 60.0, 9.0, 618.0, 998.0, 1005.0, 840.0, 76.0, 51.0, 7.0, 483.0, 983.0, 1006.0, 1023.0, 101.0, 7.0, 624.0, 1002.0, 1010.0, 831.0, 76.0, 7.0, 6.0, 483.0, 986.0, 1023.0, 911.0, 102.0, 9.0, 6.0, 623.0, 998.0, 814.0, 652.0, 74.0, 7.0, 5.0, 730.0, 985.0, 1023.0, 693.0, 101.0, 9.0, 627.0, 702.0, 1000.0, 815.0, 584.0, 74.0, 7.0, 732.0, 789.0, 1009.0, 1023.0, 101.0, 82.0, 9.0, 628.0, 743.0, 1003.0, 819.0, 74.0, 60.0, 7.0, 730.0, 787.0, 1008.0, 1020.0, 99.0, 68.0, 8.0, 625.0, 997.0, 1003.0, 805.0, 73.0, 58.0, 7.0, 848.0, 1007.0, 591.0, 98.0, 8.0, 7.0, 632.0, 1003.0, 1008.0, 815.0, 74.0, 43.0, 7.0, 733.0, 1008.0, 1014.0, 595.0, 54.0, 37.0, 7.0, 634.0, 1003.0, 1016.0, 809.0, 74.0, 7.0, 5.0, 732.0, 1007.0, 1019.0, 589.0, 54.0, 8.0, 5.0, 636.0, 1000.0, 797.0, 638.0, 72.0, 7.0, 4.0, 738.0, 1009.0, 589.0, 473.0, 53.0, 5.0, 3.0, 707.0, 1004.0, 799.0, 497.0, 73.0, 7.0, 737.0, 792.0, 1009.0, 586.0, 422.0, 53.0, 5.0, 809.0, 851.0, 785.0, 71.0, 57.0, 6.0, 736.0, 821.0, 1005.0, 572.0, 52.0, 42.0, 5.0, 816.0, 857.0, 1006.0, 785.0, 71.0, 48.0, 6.0, 742.0, 1010.0, 1015.0, 581.0, 53.0, 42.0, 5.0, 812.0, 898.0, 1016.0, 782.0, 71.0, 6.0, 5.0, 740.0, 1005.0, 1012.0, 571.0, 52.0, 30.0, 5.0, 813.0, 1014.0, 1021.0, 418.0, 70.0, 6.0, 5.0, 743.0, 1008.0, 1021.0, 569.0, 52.0, 5.0, 3.0, 817.0, 1017.0, 1023.0, 424.0, 71.0, 6.0, 3.0, 744.0, 1006.0, 566.0, 52.0, 4.0, 3.0, 817.0, 1016.0, 417.0, 336.0, 38.0, 6.0, 747.0, 800.0, 1008.0, 558.0, 348.0, 51.0, 4.0, 820.0, 860.0, 1020.0, 415.0, 299.0, 38.0, 3.0, 749.0, 858.0, 1011.0, 568.0, 52.0, 42.0, 5.0, 821.0, 883.0, 1018.0, 413.0, 38.0, 31.0, 3.0, 749.0, 1008.0, 1015.0, 558.0, 51.0, 35.0, 4.0, 821.0, 1014.0, 1020.0, 411.0, 37.0, 30.0, 3.0, 878.0, 942.0, 1022.0, 559.0, 51.0, 4.0, 3.0, 823.0, 1020.0, 1023.0, 414.0, 38.0, 3.0, 876.0, 1023.0, 1023.0, 549.0, 51.0, 4.0, 3.0, 822.0, 1017.0, 1023.0, 407.0, 37.0, 3.0, 2.0, 878.0, 1023.0, 1023.0, 402.0, 50.0, 4.0, 2.0, 825.0, 1016.0, 405.0, 326.0, 37.0, 3.0, 26.0, 876.0, 1023.0, 297.0, 241.0, 50.0, 4.0, 825.0, 865.0, 1020.0, 401.0, 251.0, 37.0, 3.0, 877.0, 906.0, 1023.0, 297.0, 214.0, 27.0, 4.0, 827.0, 906.0, 1017.0, 401.0, 37.0, 29.0, 3.0, 881.0, 927.0, 1023.0, 298.0, 27.0, 22.0, 4.0, 1016.0, 1021.0, 397.0, 36.0, 25.0, 3.0, 883.0, 1023.0, 1023.0, 294.0, 27.0, 21.0, 2.0, 829.0, 1018.0, 1023.0, 393.0, 36.0, 3.0, 2.0, 880.0, 1023.0, 1023.0, 290.0, 26.0, 15.0, 3.0, 923.0, 1020.0, 391.0, 315.0, 36.0, 3.0, 2.0, 883.0, 1023.0, 1023.0, 289.0, 26.0, 3.0, 80.0, 919.0, 1017.0, 394.0, 287.0, 36.0, 3.0, 881.0, 910.0, 1023.0, 287.0, 231.0, 26.0, 3.0, 284.0, 920.0, 1023.0, 388.0, 35.0, 28.0, 3.0, 883.0, 912.0, 289.0, 180.0, 26.0, 4.0, 922.0, 945.0, 1023.0, 215.0, 155.0, 28.0, 3.0, 886.0, 944.0, 1023.0, 288.0, 26.0, 21.0, 3.0, 920.0, 955.0, 1023.0, 211.0, 35.0, 20.0, 3.0, 885.0, 1023.0, 1023.0, 284.0, 26.0, 17.0, 4.0, 925.0, 1023.0, 1023.0, 212.0, 19.0, 15.0, 2.0, 886.0, 1023.0, 1023.0, 283.0, 26.0, 4.0, 92.0, 924.0, 1023.0, 1023.0, 209.0, 19.0, 11.0, 170.0, 884.0, 1023.0, 280.0, 226.0, 25.0, 5.0, 172.0, 923.0, 1023.0, 1023.0, 185.0, 351.0, 894.0, 1023.0, 281.0, 205.0, 26.0, 6.0, 924.0, 945.0, 1023.0, 206.0, 167.0, 19.0, 192.0, 498.0, 953.0, 1023.0, 279.0, 25.0, 20.0, 7.0, 925.0, 946.0, 1023.0, 207.0, 129.0, 18.0, 201.0, 954.0, 971.0, 1023.0, 278.0, 25.0, 20.0, 9.0, 929.0, 973.0, 1023.0, 207.0, 19.0, 15.0, 203.0, 957.0, 984.0, 1023.0, 277.0, 25.0, 14.0, 7.0, 927.0, 1023.0, 1023.0, 204.0, 18.0, 12.0, 200.0, 952.0, 1023.0, 1023.0, 150.0, 25.0, 138.0, 929.0, 1023.0, 1023.0, 202.0, 18.0, 211.0, 372.0, 958.0, 1023.0, 1023.0, 152.0, 13.0, 8.0, 319.0, 929.0, 1023.0, 203.0, 164.0, 18.0, 208.0, 417.0, 955.0, 1023.0, 932.0, 150.0, 13.0, 10.0, 927.0, 949.0, 1023.0, 199.0, 144.0, 18.0, 216.0, 954.0, 970.0, 1023.0, 149.0, 120.0, 13.0, 432.0, 646.0, 961.0, 1023.0, 202.0, 18.0, 15.0, 215.0, 957.0, 972.0, 1023.0, 148.0, 92.0, 13.0, 432.0, 980.0, 993.0, 1023.0, 201.0, 18.0, 14.0, 218.0, 991.0, 1023.0, 147.0, 13.0, 10.0, 435.0, 978.0, 1000.0, 1023.0, 199.0, 18.0, 10.0, 226.0, 960.0, 1023.0, 1023.0, 148.0, 13.0, 9.0, 433.0, 981.0, 1023.0, 966.0, 198.0, 18.0, 229.0, 382.0, 959.0, 1023.0, 1013.0, 146.0, 13.0, 439.0, 555.0, 978.0, 1023.0, 918.0, 109.0, 18.0, 237.0, 522.0, 960.0, 1023.0, 147.0, 118.0, 13.0, 447.0, 594.0, 983.0, 1023.0, 677.0, 110.0, 18.0, 241.0, 961.0, 977.0, 1023.0, 147.0, 107.0, 13.0, 982.0, 994.0, 1023.0, 108.0, 87.0, 9.0, 244.0, 959.0, 982.0, 1023.0, 144.0, 13.0, 10.0, 454.0, 980.0, 992.0, 1023.0, 107.0, 66.0, 9.0, 600.0, 960.0, 1023.0, 1023.0, 143.0, 12.0, 10.0, 450.0, 981.0, 1005.0, 1023.0, 106.0, 9.0, 8.0, 598.0, 958.0, 1023.0, 1023.0, 142.0, 12.0, 7.0, 456.0, 981.0, 1023.0, 944.0, 106.0, 9.0, 7.0, 607.0, 997.0, 1023.0, 908.0, 144.0, 13.0, 461.0, 571.0, 984.0, 1023.0, 777.0, 107.0, 9.0, 610.0, 874.0, 662.0, 122.0, 13.0, 457.0, 658.0, 980.0, 1023.0, 105.0, 85.0, 9.0, 607.0, 715.0, 998.0, 864.0, 476.0, 89.0, 12.0, 464.0, 984.0, 996.0, 1023.0, 104.0, 75.0, 9.0, 608.0, 999.0, 1007.0, 856.0, 78.0, 62.0, 11.0, 466.0, 984.0, 1002.0, 1023.0, 105.0, 9.0, 8.0, 607.0, 997.0, 1005.0, 848.0, 77.0, 47.0, 7.0, 465.0, 982.0, 1023.0, 922.0, 103.0, 9.0, 7.0, 612.0, 998.0, 1012.0, 848.0, 77.0, 7.0, 474.0, 985.0, 1023.0, 888.0, 104.0, 9.0, 5.0, 613.0, 1000.0, 849.0, 679.0, 77.0, 7.0, 4.0, 718.0, 981.0, 1023.0, 638.0, 103.0, 9.0, 615.0, 695.0, 999.0, 840.0, 544.0, 76.0, 7.0, 722.0, 781.0, 1006.0, 1023.0, 102.0, 83.0, 9.0, 618.0, 765.0, 1001.0, 841.0, 76.0, 62.0, 7.0, 723.0, 799.0, 1008.0, 1023.0, 102.0, 64.0, 9.0, 615.0, 1000.0, 1006.0, 827.0, 75.0, 54.0, 7.0, 725.0, 1005.0, 1010.0, 609.0, 101.0, 9.0, 7.0, 624.0, 1008.0, 835.0, 76.0, 7.0, 6.0, 726.0, 1009.0, 1014.0, 612.0, 56.0, 34.0, 6.0, 626.0, 1001.0, 837.0, 669.0, 76.0, 7.0, 5.0, 724.0, 1008.0, 1022.0, 603.0, 55.0, 8.0, 624.0, 701.0, 999.0, 822.0, 627.0, 75.0, 7.0, 4.0, 732.0, 1006.0, 603.0, 484.0, 55.0, 5.0, 3.0, 728.0, 1002.0, 822.0, 458.0, 75.0, 7.0, 727.0, 785.0, 1010.0, 604.0, 394.0, 55.0, 5.0, 804.0, 847.0, 999.0, 810.0, 73.0, 59.0, 727.0, 833.0, 1006.0, 595.0, 54.0, 44.0, 5.0, 806.0, 863.0, 1004.0, 809.0, 73.0, 45.0, 7.0, 730.0, 1006.0, 1011.0, 595.0, 54.0, 39.0, 5.0, 807.0, 1017.0, 1023.0, 820.0, 74.0, 7.0, 5.0, 728.0, 1006.0, 1015.0, 591.0, 54.0, 5.0, 4.0, 809.0, 1014.0, 1019.0, 435.0, 73.0, 7.0, 4.0, 736.0, 1008.0, 592.0, 476.0, 54.0, 5.0, 4.0, 812.0, 1017.0, 1023.0, 437.0, 73.0, 7.0, 734.0, 790.0, 1008.0, 590.0, 450.0, 54.0, 5.0, 2.0, 1013.0, 429.0, 346.0, 39.0, 6.0, 734.0, 808.0, 1007.0, 579.0, 327.0, 53.0, 5.0, 813.0, 855.0, 1015.0, 432.0, 282.0, 39.0, 3.0, 737.0, 1009.0, 1015.0, 585.0, 53.0, 43.0, 5.0, 812.0, 892.0, 1017.0, 431.0, 39.0, 32.0, 3.0, 738.0, 1008.0, 1014.0, 583.0, 53.0, 33.0, 5.0, 814.0, 1015.0, 1021.0, 428.0, 39.0, 28.0, 3.0, 873.0, 1010.0, 1021.0, 583.0, 53.0, 5.0, 4.0, 816.0, 1019.0, 1023.0, 431.0, 39.0, 2.0, 870.0, 1023.0, 1023.0, 518.0, 53.0, 5.0, 3.0, 811.0, 1015.0, 423.0, 341.0, 39.0, 3.0, 2.0, 869.0, 1023.0, 1023.0, 374.0, 51.0, 4.0, 813.0, 855.0, 1015.0, 419.0, 321.0, 38.0, 3.0, 52.0, 872.0, 1023.0, 314.0, 255.0, 52.0, 5.0, 815.0, 870.0, 1015.0, 417.0, 235.0, 38.0, 3.0, 870.0, 901.0, 1023.0, 309.0, 202.0, 28.0, 4.0, 818.0, 1015.0, 1020.0, 416.0, 38.0, 31.0, 3.0, 875.0, 933.0, 1023.0, 309.0, 28.0, 23.0, 4.0, 1019.0, 1023.0, 416.0, 38.0, 23.0, 3.0, 873.0, 1023.0, 1023.0, 308.0, 28.0, 20.0, 2.0, 816.0, 1015.0, 1023.0, 410.0, 38.0, 3.0, 2.0, 874.0, 1023.0, 1023.0, 310.0, 28.0, 2.0, 44.0, 916.0, 1018.0, 416.0, 335.0, 38.0, 3.0, 6.0, 876.0, 1023.0, 308.0, 248.0, 28.0, 2.0, 62.0, 913.0, 1018.0, 412.0, 272.0, 37.0, 3.0, 874.0, 904.0, 1023.0, 305.0, 233.0, 28.0, 2.0, 318.0, 917.0, 1023.0, 411.0, 38.0, 30.0, 876.0, 917.0, 1023.0, 307.0, 174.0, 28.0, 2.0, 915.0, 938.0, 1023.0, 226.0, 148.0, 27.0, 3.0, 875.0, 1023.0, 1023.0, 303.0, 28.0, 22.0, 2.0, 914.0, 959.0, 1023.0, 224.0, 37.0, 3.0, 2.0, 877.0, 1023.0, 1023.0, 305.0, 28.0, 17.0, 2.0, 915.0, 1023.0, 1023.0, 222.0, 20.0, 14.0, 2.0, 878.0, 1023.0, 1023.0, 302.0, 28.0, 2.0, 56.0, 914.0, 1023.0, 1023.0, 223.0, 20.0, 121.0, 300.0, 876.0, 1023.0, 298.0, 241.0, 27.0, 2.0, 211.0, 1023.0, 222.0, 179.0, 20.0, 133.0, 330.0, 899.0, 1023.0, 301.0, 199.0, 27.0, 2.0, 920.0, 943.0, 1023.0, 223.0, 171.0, 20.0, 133.0, 514.0, 948.0, 1023.0, 300.0, 27.0, 22.0, 2.0, 916.0, 946.0, 1023.0, 221.0, 125.0, 20.0, 137.0, 949.0, 967.0, 1023.0, 297.0, 27.0, 19.0, 2.0, 922.0, 1023.0, 1023.0, 222.0, 20.0, 16.0, 140.0, 950.0, 984.0, 1023.0, 296.0, 27.0, 2.0, 65.0, 920.0, 1023.0, 1023.0, 220.0, 20.0, 12.0, 132.0, 946.0, 1023.0, 161.0, 27.0, 2.0, 85.0, 918.0, 1023.0, 1023.0, 216.0, 20.0, 148.0, 322.0, 952.0, 1023.0, 1023.0, 163.0, 14.0, 2.0, 341.0, 923.0, 1023.0, 220.0, 177.0, 20.0, 147.0, 436.0, 951.0, 1023.0, 162.0, 131.0, 14.0, 3.0, 919.0, 941.0, 1023.0, 217.0, 143.0, 19.0, 156.0, 950.0, 967.0, 1023.0, 161.0, 122.0, 14.0, 384.0, 656.0, 964.0, 1023.0, 216.0, 19.0, 15.0, 169.0, 955.0, 977.0, 1023.0, 163.0, 91.0, 14.0, 385.0, 972.0, 986.0, 1023.0, 215.0, 14.0, 151.0, 948.0, 1023.0, 1023.0, 160.0, 14.0, 11.0, 390.0, 976.0, 1000.0, 1023.0, 214.0, 19.0, 161.0, 329.0, 953.0, 1023.0, 1023.0, 160.0, 14.0, 8.0, 389.0, 975.0, 1023.0, 1009.0, 215.0, 19.0, 167.0, 348.0, 951.0, 1023.0, 1007.0, 159.0, 14.0, 387.0, 512.0, 973.0, 1023.0, 907.0, 118.0, 19.0, 168.0, 531.0, 952.0, 1023.0, 158.0, 128.0, 14.0, 393.0, 601.0, 978.0, 1023.0, 118.0, 95.0, 19.0, 175.0, 955.0, 972.0, 1023.0, 160.0, 105.0, 14.0, 975.0, 988.0, 1023.0, 117.0, 89.0, 10.0, 168.0, 951.0, 983.0, 1023.0, 155.0, 14.0, 11.0, 397.0, 976.0, 993.0, 1023.0, 115.0, 64.0, 10.0, 564.0, 955.0, 1023.0, 1023.0, 158.0, 14.0, 10.0, 400.0, 978.0, 1023.0, 995.0, 116.0, 10.0, 8.0, 560.0, 954.0, 1023.0, 1023.0, 157.0, 14.0, 402.0, 520.0, 973.0, 1023.0, 997.0, 116.0, 10.0, 6.0, 569.0, 994.0, 1023.0, 156.0, 126.0, 14.0, 407.0, 539.0, 976.0, 1023.0, 760.0, 10.0, 568.0, 656.0, 993.0, 942.0, 650.0, 120.0, 14.0, 407.0, 663.0, 974.0, 1023.0, 115.0, 93.0, 10.0, 567.0, 714.0, 994.0, 940.0, 154.0, 88.0, 14.0, 409.0, 976.0, 989.0, 1023.0, 115.0, 75.0, 10.0, 573.0, 996.0, 1006.0, 942.0, 86.0, 65.0, 11.0, 410.0, 979.0, 1003.0, 1023.0, 115.0, 10.0, 8.0, 567.0, 993.0, 1005.0, 937.0, 85.0, 47.0, 7.0, 410.0, 976.0, 1023.0, 984.0, 113.0, 10.0, 7.0, 572.0, 995.0, 931.0, 747.0, 85.0, 8.0, 462.0, 978.0, 1023.0, 883.0, 114.0, 10.0, 570.0, 656.0, 996.0, 933.0, 748.0, 84.0, 8.0, 5.0, 687.0, 977.0, 1023.0, 113.0, 92.0, 10.0, 572.0, 666.0, 993.0, 927.0, 544.0, 84.0, 7.0, 692.0, 756.0, 1007.0, 1023.0, 113.0, 87.0, 10.0, 579.0, 766.0, 997.0, 928.0, 84.0, 68.0, 7.0, 693.0, 802.0, 1007.0, 1023.0, 113.0, 64.0, 10.0, 576.0, 996.0, 1006.0, 922.0, 83.0, 54.0, 7.0, 691.0, 1004.0, 1007.0, 670.0, 10.0, 8.0, 581.0, 994.0, 1007.0, 921.0, 83.0, 7.0, 6.0, 694.0, 1006.0, 1011.0, 675.0, 62.0, 34.0, 6.0, 579.0, 994.0, 919.0, 735.0, 83.0, 7.0, 5.0, 694.0, 1005.0, 670.0, 538.0, 61.0, 10.0, 585.0, 670.0, 997.0, 923.0, 637.0, 83.0, 7.0, 696.0, 758.0, 1004.0, 670.0, 537.0, 61.0, 5.0, 3.0, 727.0, 997.0, 912.0, 83.0, 67.0, 7.0, 697.0, 767.0, 1009.0, 669.0, 393.0, 61.0, 6.0, 778.0, 826.0, 997.0, 905.0, 82.0, 62.0, 697.0, 834.0, 1006.0, 667.0, 61.0, 49.0, 5.0, 785.0, 864.0, 1007.0, 910.0, 82.0, 46.0, 7.0, 702.0, 1008.0, 1011.0, 667.0, 61.0, 39.0, 5.0, 786.0, 1013.0, 1019.0, 915.0, 83.0, 7.0, 6.0, 698.0, 1004.0, 1015.0, 659.0, 60.0, 5.0, 4.0, 782.0, 1011.0, 1019.0, 483.0, 81.0, 7.0, 4.0, 705.0]";
                PointData entity = new PointData();
                OutputData resuls = new OutputData();
                data = data.Replace("[", "");
                data = data.Replace("]", "");
                data = data.Replace(" ", "");
                string[] split_datas = data.Split(',');
                foreach (string split_data in split_datas)
                {
                    listData.Add(double.Parse(split_data));
                }

                int l = 0;
                int overlap = 15;
                int dem = 1;
                int check = 0;
                int removeCount = listData.Count() - 1023;
                //if (listData.Count() > 2050)
                //{
                //    listData.RemoveRange(removeCount, 1023);
                //    listData.RemoveRange(0, 1023);
                //}
                double[] test = listData.ToArray();
                int div = test.Length / 512;
                int sqv = div * 512;
                if (sqv < test.Length) div = div + 1;
                List<Double> dl = new List<double>();
                int lap = test.Length / 16;
                int inten = 0;
                for (int i = 0; i < test.Length; i++)
                {
                    if (i == 0)
                    {
                        dl.Clear();
                        int loop = i + 512;
                        for (int j = i; j < loop; j++)
                        {
                            dl.Add(test[j]);
                        }


                        inten = inten + 1;
                        InsertTable testFun = new InsertTable();
                        if (inten <= 20)
                            entity = testFun.dataCloudTest(dl, cloud, 1);
                        else entity = testFun.dataCloudTest(dl, cloud, 0);
                        batchOperation.Insert(entity);

                        //TableOperation inser = TableOperation.Insert(entity);
                        //table.Execute(inser);
                        //testFun.InsertData(dl, cloud);
                    }
                    else if (i == overlap && dem <= lap)
                    {
                        dl.Clear();
                        int loop = i + 512;
                        if (loop <= test.Length - 1)
                        {
                            for (int j = i; j < loop; j++)
                            {
                                dl.Add(test[j]);
                            }
                            inten = inten + 1;
                            InsertTable testFun = new InsertTable();
                            if (inten <= 20)
                                entity = testFun.dataCloudTest(dl, cloud, 1);
                            else entity = testFun.dataCloudTest(dl, cloud, 0);
                            // TableOperation inser = TableOperation.Insert(entity);
                            batchOperation.Insert(entity);
                            //table.Execute(inser);
                            //testFun.InsertData(dl, cloud);
                        }
                        else
                        {

                            dem = lap + 1;
                        }
                        overlap = overlap + 16;
                        dem = dem + 1;
                    }

                    if (batchOperation.Count() == 98)
                    {
                        table.ExecuteBatch(batchOperation);
                        batchOperation.Clear();
                        inten = 0;
                        // batchOperation.Clear();
                        //table.ExecuteBatch(batchOperation);
                        // demCheck = 0;
                    }
                }

                table.ExecuteBatch(batchOperation);
            }
            catch (Exception ex)
            {
                //  ex.
            }
            return Ok("success");
            
        }  
        [HttpPost]
        public IHttpActionResult Post(CloudData cloud)
        {


            string accountName = "cloudthinkstorage";
            string accountKey = "u0gOpUjoxc9OWpjSBTSvm7tFHZPz8r8iFKK4uWxjtnC3Sh17oKytYMxR69lsfmGfkcmoQNmPPRWbD12l8QyNbg==";
            try
            {
                StorageCredentials creds = new StorageCredentials(accountName, accountKey);
                CloudStorageAccount account = new CloudStorageAccount(creds, useHttps: true);
                CloudTableClient client = account.CreateCloudTableClient();
                CloudTable table = client.GetTableReference("cloudthink");
                TableBatchOperation batchOperation = new TableBatchOperation();
                table.CreateIfNotExists();
                List<Double> listData = new List<double>();
                string data = cloud.Data;
                PointData entity = new PointData();
                OutputData resuls = new OutputData();
                data = data.Replace("[", "");
                data = data.Replace("]", "");
                data = data.Replace(" ", "");
                string[] split_datas = data.Split(',');
                foreach (string split_data in split_datas)
                {
                    listData.Add(double.Parse(split_data));
                }

                int l = 0;
                int overlap = 15;
                int dem = 1;
                int check = 0;
                int removeCount = listData.Count() - 1023;
                if (listData.Count() > 2050)
                {
                    listData.RemoveRange(removeCount, 1023);
                    listData.RemoveRange(0, 1023);
                }
                double[] test = listData.ToArray();
                int div = test.Length / 512;
                int sqv = div * 512;
                if (sqv < test.Length) div = div + 1;
                List<Double> dl = new List<double>();
                int lap = test.Length / 16;
                for (int i = 0; i < test.Length; i++)
                {
                    if (i == 0)
                    {
                        dl.Clear();
                        int loop = i + 512;
                        for (int j = i; j < loop; j++)
                        {
                            dl.Add(test[j]);
                        }



                        InsertTable testFun = new InsertTable();
                        entity = testFun.dataCloud(dl, cloud);
                        batchOperation.Insert(entity);

                        //TableOperation inser = TableOperation.Insert(entity);
                        //table.Execute(inser);
                        //testFun.InsertData(dl, cloud);
                    }
                    else if (i == overlap && dem <= lap)
                    {
                        dl.Clear();
                        int loop = i + 512;
                        if (loop <= test.Length - 1)
                        {
                            for (int j = i; j < loop; j++)
                            {
                                dl.Add(test[j]);
                            }
                            InsertTable testFun = new InsertTable();

                            entity = testFun.dataCloud(dl, cloud);
                            // TableOperation inser = TableOperation.Insert(entity);
                            batchOperation.Insert(entity);
                            //table.Execute(inser);
                            //testFun.InsertData(dl, cloud);
                        }
                        else
                        {

                            dem = lap + 1;
                        }
                        overlap = overlap + 16;
                        dem = dem + 1;
                    }
 
                    if (batchOperation.Count() == 98)
                    {
                        table.ExecuteBatch(batchOperation);
                        batchOperation.Clear();
                        // batchOperation.Clear();
                        //table.ExecuteBatch(batchOperation);
                        // demCheck = 0;
                    }
                }

                table.ExecuteBatch(batchOperation);
            }
            catch (Exception ex)
            {
                //  ex.
            }
            return Ok("success");

        }
   
         
    }

    
}

